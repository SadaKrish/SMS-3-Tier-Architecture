
@model  SMS.ViewModel.Student.StudentViewModel
@{
    ViewBag.Title = "Index";
}
<link href="https://cdn.datatables.net/2.0.7/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
<style>

    .table {
        font-size: 12px;
        text-align: center;
    }

    div .panel-body {
        margin-bottom: 25px;
    }
    .filter {
        right:0;
        float:right;
    }

</style>
<div class="card panel-default">
    <div class="panel-heading">
        <h2 class="card-header">Student</h2>
    </div>
   
    <div class="panel-body card-body">
        <div class="filter">
            <label for="statusFilter">Filter by Status:</label>
            <select id="statusFilter">
                <option value="all">All</option>
                <option value="enabled">Enabled</option>
                <option value="disabled">Disabled</option>
            </select>
        </div>
        <!--<select id="searchCriteria">
            <option value="teacherRegNo">Teacher Registration Number</option>
            <option value="firstName">First Name</option>
            <option value="lastName">Last Name</option>-->
        <!-- Add more options as needed -->
        <!--</select>
        <input type="text" id="searchInput" placeholder="Enter search keyword...">
        <button id="searchButton">Search</button>
        <div id="searchResults"></div>-->
        <a class="btn btn-outline-primary" style="margin: 10px; background-color: #cbf5ee;" onclick="LoadCreatePage()" id="button"> <i class="bi bi-plus"></i>  Add New Student</a>

        <div class="table-responsive">
            <table id="studentlist" class="table table-bordered table-striped" style="text-align:center; width: 100%;">
                <thead style="text-align:center;">
                    <tr>

                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().StudentRegNo)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().FirstName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().MiddleName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().LastName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().DisplayName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().Email)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().Gender)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().DOB)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().Address)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().ContactNo)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.StudentList.First().IsEnable)</th>
                        <th style="background-color: #cbf5ee;"></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<div class="col-md-4" id="createoredit">
    <!--Partial view-->


</div>




@section scripts{
    <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.bootstrap5.min.js"></script>

    <script>


    //load the initail data
        $(document).ready(function () {
           
            // Call initializeDataTable function when the DOM is ready
            initializeDataTable();
           
            $('#statusFilter').on('change', function () {
                var filterValue = $(this).val(); // Get the selected filter value

                // Modify the AJAX URL based on the selected filter value
                var url;
                if (filterValue === 'all') {
                    url = '/Student/GetStudents';
                } else {
                    url = '/Student/GetStudents?isEnable=' + (filterValue === 'enabled');
                }

                // Reload the datatable with the updated data
                datatable.ajax.url(url).load();
            });
           
        });
        

       
        //Load create page
      function LoadCreatePage() {
        //* /Hide student list and load create new form*/
          $("#studentlist").hide();
          $("#button").hide();
          $('.panel-body').hide();
        //  $("createoredit").show();
          $("#back-to-list").show();

        $.ajax({
            type: "GET",
           url: "@Url.Action("AddOrEdit", "Student")",

            data: {},
            cache: false,
            async: false,

            success: function (data) {
                $("#createoredit").html(data)
            },
            error: function (xhr, ajaxOptions, thrownError) {
                aler('');
            }
        })
        }

        //load edit page
        function LoadEditPage(studentId) {
            // Hide student list, button, and panel body
            $("#studentlist").hide();
            $("#button").hide();
            $('.panel-body').hide();
            $("#back-to-list").show(); // Show the "Back to List" button

            // Make an AJAX call to retrieve the edit form for the specified student ID
            $.ajax({
                type: "GET",
                url: "@Url.Action("AddOrEdit", "Student")/" + studentId,
                cache: false,
                success: function (data) {
                    $("#createoredit").html(data); // Populate the create/edit form
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error loading edit form');
                }
            });
        }
        function addStudentSuccess(response) {
            if (response.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: response.message,
                    showCancelButton: false,
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $("#createoredit").empty();

                        // Show the student list, button, panel body, and filter
                        $("#studentlist").show();
                        $("#button").show();
                        $('.panel-body').show();
                        $(".filter").show();

                        // Hide the "Back to List" button
                        $("#back-to-list").hide();

                        // Reload the data table
                        datatable.ajax.reload();
                    }
                });
            } else {
                Swal.fire({ icon: 'error', title: 'Error', text: response.message });
            }
        }

        //function addStudentFailure(error) {
        //    console.error(error);
        //    Swal.fire('Error!', 'An error occurred while adding the student', 'error');
        //}
        //back button actions

        function LoadList() {
            $("#studentlist").show();
            $('#button').show();
            $('#back-to-list').hide(); // Hide the "Back to List" button
            $("#createoredit").empty();
            $('.panel-body').show();
            $('.filter').show();
            datatable.ajax.reload();
        }
        
        //load table data
        function initializeDataTable() {
            datatable = $("#studentlist").DataTable({
                "ajax": {
                    "url": "/Student/GetStudents",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "StudentRegNo" },
                    { "data": "FirstName" },
                    { "data": "MiddleName" },
                    { "data": "LastName" },
                    { "data": "DisplayName" },
                    {
                        "data": "Email",
                        "render": function (data) {
                            return "<a href='mailto:" + data + "'>" + data + "</a>";
                        }
                    },
                    { "data": "Gender" },
                    {
                        "data": "DOB",
                        "render": function (data) {
                            // Format the date as "YYYY-MM-DD"
                            var date = new Date(parseInt(data.substr(6)));
                            return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
                        }
                    },
                    { "data": "Address" },
                    {
                        "data": "ContactNo",
                        "render": function (data) {
                            return "<a href='tel:" + data + "'>" + data + "</a>";
                        }
                    },
    
                    {
                        "data": "IsEnable",
                        "render": function (data, type, row) {
                            // Render a checkbox based on the IsEnable value
                            var checkbox = '<input type="checkbox" id="studentCheckbox_' + row.StudentID + '" ';
                            if (data) {
                                checkbox += 'checked ';
                            }
                            checkbox += 'onclick="ToggleEnable(' + row.StudentID + ', this.checked, \'' + row.DisplayName.replace(/'/g, "\\'") + '\')" />';

                            return checkbox;
                        }
                    }
,
                    {
                        "data": "StudentID",
                        "render": function (data) {
                            return "<a class='btn' style='background-color: #cbf5ee ;' onclick= LoadEditPage(" + data + ")><i class='bi bi-pencil-square'></i></a>  <a class='btn' style='background-color: #cbf5ee ;' onclick=Delete(" + data + ")><i class='bi bi-trash' style='color:red;'></i></a>"
                        },
                        "orderable": false,
                        "searchable": false
                    }
                ],
                "pageLength": 5,
                "lengthMenu": [5, 10, 15, 20, 25]
                
            });
            
        }

        //$(document).ready(function () {
        //    $('#studentlist').DataTable({
        //        searching: false // Disable the search bar
        //    });
        //});

        function getStatusFilterValue(statusFilter) {
            if (statusFilter === "enabled") {
                return true;
            } else if (statusFilter === "disabled") {
                return false;
            }
            // Return null for "all" option or if no filter is selected
            return null;
        }

        function Delete(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Delete","Student")/' + id,
                        success: function (data) {
                            if (data.success) {
                                datatable.ajax.reload();

                                Swal.fire({
                                    title: 'Deleted!',
                                    text: data.message,
                                    icon: 'success'
                                });
                            } else {
                                Swal.fire({
                                    title: 'Warning!',
                                    text: data.message,
                                    icon: 'warning'
                                });
                            }
                        }
                    });
                }
            });
        }




    //enable button
            function ToggleEnable(id, isChecked,displayName) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to toggle the enable status of this student ' + displayName + '?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            // Proceed with toggling the enable status of the student
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ToggleEnable", "Student")',
                data: { id: id },
                success: function(response) {
                    if (response.success) {
                        datatable.ajax.reload(); // Reload the data table
                        Swal.fire({
                            title: 'Success!',
                            text: response.message,
                            icon: response.message.includes('Warning') ? 'warning' : 'success' // Check if the response message contains 'Warning'
                        });
                    } else {
                        $('#studentCheckbox_' + id).prop('checked', !isChecked);
                        Swal.fire({
                            title: 'Error!',
                            text: response.message,
                            icon: 'error'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    $('#studentCheckbox_' + id).prop('checked', !isChecked);
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while processing your request.',
                        icon: 'error'
                    });
                }
            });
        } else {
            $('#studentCheckbox_' + id).prop('checked', !isChecked);
        }
    });
}
    </script>

}





