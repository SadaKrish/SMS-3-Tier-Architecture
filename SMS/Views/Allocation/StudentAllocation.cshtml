﻿﻿<!--Author Details-->
@model  SMS.ViewModel.Allocation.AllocationViewModel
@{
    ViewBag.Title = "StudentAllocation";
}
<link href="https://cdn.datatables.net/2.0.7/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
<style>

    .table {
        font-size: 12px;
        text-align: center;
    }

    .card {
        margin: 20px auto; 
        max-width: 1000px; 
        padding: 10px; 
    }

    .panel-heading {
        padding: 10px; 
    }

    .panel-body {
        padding: 10px; 
        margin-bottom: 20px; 
    }
  
    .subject-item-container {
        display: flex;
        align-items: center;
    }

    .subject-item {
        flex: 1;
    }

    .btn-delete-subject {
        margin-left: 10px; 
    }

    #studentlist_wrapper {
        max-width: 1200px; 
        margin: 0 auto; 
    }
    .controls-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

   .controls-container .filter,
 .controls-container .search-container {
     display: flex;
     align-items: center;
 }

 .controls-container .filter {
     margin-left: auto;
     margin-right: 20px;
 }

 .controls-container .search-container {
     margin-left: auto;
 }

 .controls-container select,
 .controls-container input {
     margin-left: 10px;
 }  
</style>
<div class="card panel-default">
    <div class="panel-heading">
        <h2 class="card-header">Student Allocation</h2>
    </div>
    

    <div class="panel-body card-body">



        
        <div class="controls-container">
            <a class="btn btn-outline-primary" style="margin: 10px; background-color: #cbf5ee;" onclick="LoadCreatePage()" id="button"> <i class="bi bi-plus"></i>  Add New Allocation</a>
            <div class="form-group filter">
                <label for="statusFilter">Student Status:</label>
                <select id="filterStatus">
                    <option value="all">All</option>
                    <option value="active">Active</option>
                    <option value="inactive">InActive</option>
                </select>
            </div>
            <div class="search-container">
                <select id="searchCategory">
                    <option value="StudentRegNo">Student Reg No</option>
                    <option value="TeacherRegNo">Teacher Reg No</option>
                    <option value="SubjectCode">Subject Code</option>
                    <option value="StudentName">Student Name</option>
                    <option value="TeacherName">Teacher Name</option>
                    <option value="SubjectName">Subject Name</option>
                </select>
                <input type="text" id="customSearchBox" placeholder="Search...">
            </div>

        </div>

        <div class="table-responsive">
            <table id="studentlist" class="table table-bordered table-striped" style="text-align:center; width: 100%;">
                <thead style="text-align:center;">
                    <tr>
                        <th style="background-color: #cbf5ee; text-align: center;">Student Information</th>
                        <th style="background-color: #cbf5ee; text-align: center;">Teacher Information</th>




                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>
@*<button id="back-to-list" class="btn m-4" onclick="LoadList()" style="display: none;">Back</button>*@
<div class="col-md-4" id="createoredit">
    <!--Partial view-->


</div>



@section scripts{
    <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.bootstrap5.min.js"></script>

    <script>


      $(document).ready(function () {
    function initializeDataTable(data = []) {
        // Check if the DataTable instance already exists
        if ($.fn.DataTable.isDataTable("#studentlist")) {
            $("#studentlist").DataTable().destroy();
        }

        $("#studentlist").DataTable({
            "data": data,
            "columns": [
                {
                    "data": null,
                    "title": "Student Information",
                    "render": function (data, type, row) {
                        var statusText = data.IsEnable ? "<span class='badge bg-success'>Active</span>" : "<span class='badge bg-danger'>Inactive</span>";
                        return data.StudentRegNo + ' - ' + data.DisplayName + ' ' + statusText;
                    }
                },
                {
                    "data": null,
                    "title": "Teacher & Subject Information",
                    "render": function (data, type, row) {
                        var teacherSubjectInfo = '';
                        row.TeacherAllocations.forEach(function (teacherAllocation, index) {
                            teacherSubjectInfo += "<div style='margin-top:10px;'>";
                            teacherSubjectInfo += "<div style='text-align: left;'><strong>Teacher: </strong>" + teacherAllocation.TeacherRegNo + ' - ' + teacherAllocation.TeacherName + "</div>";
                            teacherAllocation.Subjects.forEach(function (subject) {
                                teacherSubjectInfo += "<div class='subject-item-container'>";
                                teacherSubjectInfo += "<div class='subject-item'>" + subject.SubjectCode + ' - ' + subject.Name + "</div>";
                                teacherSubjectInfo += "<button class='btn btn-delete-subject' onclick='Delete(" + subject.StudentAllocationID + ")'><i class='bi bi-trash' style='color:red;'></i></button>";
                                teacherSubjectInfo += "</div>";
                            });
                            teacherSubjectInfo += "</div>";
                            if (index < row.TeacherAllocations.length - 1) {
                                teacherSubjectInfo += "<hr style='border-top: 1px solid #000; margin-top: 10px; margin-bottom: 10px;'>";
                            }
                        });
                        return teacherSubjectInfo;
                    }
                }
            ],
            "columnDefs": [
                { "width": "30%", "targets": 0 },
                { "width": "60%", "targets": 1 }
            ],
            "pageLength": 5,
            "lengthMenu": [5, 10, 15, 20, 25],
            "searching":false
        });
    }

    function searchAllocations() {
        var searchText = $('#customSearchBox').val().trim();
        var searchCategory = $('#searchCategory').val();

        $.ajax({
            url: '@Url.Action("SearchStudentAllocations", "Allocation")',
            type: 'POST',
            data: { searchText: searchText, searchCategory: searchCategory },
            success: function (response) {
                if (response.success) {
                    // Reinitialize the DataTable with the new data
                    initializeDataTable(response.data);
                } else {
                    console.error('Search failed:', response.message);
                }
            },
            error: function (xhr, status, error) {
                console.error('Error:', error);
            }
        });
    }

    // Initial DataTable load
    initializeDataTable();

    // Event handlers for search input and button
    $('#customSearchBox').on('keyup', searchAllocations);
    $('#searchButton').on('click', searchAllocations);
});




        //Load create page
      function LoadCreatePage() {
        //* /Hide student list and load create new form*/
          $("#studentlist").hide();
          $("#button").hide();
          $('.panel-body').hide();

          $("#back-to-list").show();
          $(".filter").hide();
          $("createoredit").show();
        $.ajax({
            type: "GET",
           url: "@Url.Action("AddOrEditStudent", "Allocation")",

            data: {},
            cache: false,
            async: false,

            success: function (data) {
                $("createoredit").show();
                $("#createoredit").html(data)
            },
            error: function (xhr, ajaxOptions, thrownError) {
                aler('');
            }
        })
        }
        function addAllocationSuccess(response) {
            if (response.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: response.message,
                    showCancelButton: false,
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $("#createoredit").empty();

                        // Show the student list, button, panel body, and filter
                        $("#studentlist").show();
                        $("#button").show();
                        $('.panel-body').show();
                        $(".filter").show();

                        // Hide the "Back to List" button
                        $("#back-to-list").hide();

                        // Reload the data table
                        var datatable = $("#studentlist").DataTable();
                        datatable.ajax.reload();



                    }
                });
            } else {
                Swal.fire({ icon: 'error', title: 'Error', text: response.message });
            }
        }

        function addallocationFailure(error) {
            console.error(error);
            Swal.fire('Error!', 'An error occurred while adding the allocation', 'error');
        }







        //back button actions

        function LoadList() {
            $("#studentlist").show();
            $('#button').show();
            $('#back-to-list').hide(); // Hide the "Back to List" button
            $("#createoredit").empty();
            $('.panel-body').show();
            $('.filter').show();

        }

        //load table data
        function initializeDataTable(status = 'all') {
            // Check if the DataTable instance already exists
            if ($.fn.DataTable.isDataTable("#studentlist")) {

                $("#studentlist").DataTable().destroy();
            }

            var datatable = $("#studentlist").DataTable({
                "ajax": {
                    "url": "/Allocation/GetAllStudentAllocation",
                    "type": "GET",
                    "datatype": "json",
                    "data": {
                        status: status
                    },
                    "dataSrc": function (json) {
                        if (json.success) {
                            return json.data;
                        } else {
                            Swal.fire('Error', json.message, 'error');
                            return [];
                        }
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "title": "Student Information",
                        "render": function (data, type, row) {
                            var statusText = data.IsEnable ? "<span class='badge bg-success'>Active</span>" : "<span class='badge bg-danger'>Inactive</span>";
                            return data.StudentRegNo + ' - ' + data.DisplayName + ' ' + statusText;
                        }
                    },
                    {
                        "data": null,
                        "title": "Teacher & Subject Information",
                        "render": function (data, type, row) {
                            var teacherSubjectInfo = '';
                            data.TeacherAllocations.forEach(function (teacherAllocation, index) {
                                teacherSubjectInfo += "<div style='margin-top:10px;'>";
                                teacherSubjectInfo += "<div style='text-align: left;'><strong>Teacher: </strong>" + teacherAllocation.TeacherRegNo + ' - ' + teacherAllocation.TeacherName + "</div>";

                                teacherAllocation.Subjects.forEach(function (subject) {
                                    teacherSubjectInfo += "<div class='subject-item-container'>";
                                    teacherSubjectInfo += "<div class='subject-item'>" + subject.SubjectCode + ' - ' + subject.Name + "</div>";
                                    teacherSubjectInfo += "<button class='btn btn-delete-subject' onclick='Delete(" + subject.StudentAllocationID + ")'><i class='bi bi-trash' style='color:red;'></i></button>";
                                    teacherSubjectInfo += "</div>";
                                });
                                teacherSubjectInfo += "</div>";
                                if (index < data.TeacherAllocations.length - 1) {
                                    teacherSubjectInfo += "<hr style='border-top: 1px solid #000; margin-top: 10px; margin-bottom: 10px;'>";
                                }
                            });
                            return teacherSubjectInfo;
                        }
                    }

                ]

,
                "columnDefs": [
                    { "width": "30%", "targets": 0 },
                    { "width": "60%", "targets": 1 }

                ],
                "pageLength": 5,
                "lengthMenu": [5, 10, 15, 20, 25],
                "searching":false
            });

        }

        $(document).ready(function () {
            initializeDataTable();

            $('#filterStatus').on('change', function () {
                var status = $(this).val();
                initializeDataTable(status);
            });
        });



        function LoadEditPage(allocationID) {
            // Hide student list, button, and panel body
            $("#studentlist").hide();
            $("#button").hide();
            $('.panel-body').hide();
            $("#back-to-list").show(); // Show the "Back to List" button
            $(".filter").hide();

            // Make an AJAX call to retrieve the edit form for the specified allocation ID
            $.ajax({
                type: "GET",
                url: "/Allocation/AddOrEditStudent/" + allocationID,
                cache: false,
                success: function (data) {
                    $("#createoredit").html(data); // Populate the create/edit form
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error loading edit form');
                }
            });
        }

        function Delete(allocationID) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '/Allocation/DeleteStudentAllocation/' + allocationID,
                        success: function (data) {
                            if (data.success) {
                                $("#studentlist").DataTable().ajax.reload();
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: data.message,
                                    icon: 'success'
                                });
                            } else {
                                Swal.fire({
                                    title: 'Warning!',
                                    text: data.message,
                                    icon: 'warning'
                                });
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            Swal.fire('Error!', 'An error occurred while deleting the allocation', 'error');
                        }
                    });
                }
            });
        }



        function deleteAllocation(allocationID) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {

                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '/Allocation/DeleteWholeStudentAllocation/' + allocationID,
                        success: function (data) {
                            if (data.success) {
                                $("#studentlist").DataTable().ajax.reload();
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: data.message,
                                    icon: 'success'
                                });
                            } else {
                                Swal.fire({
                                    title: 'Warning!',
                                    text: data.message,
                                    icon: 'warning'
                                });
                            }
                        },
                        error: function (xhr, ajaxOptions, thrownError) {
                            Swal.fire('Error!', 'An error occurred while deleting the allocation', 'error');
                        }
                    });
                }
            });
        }




        @*function Delete(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("DeleteStudentAllocation", "Allocation")/' + id,
                        success: function (data) {
                            if (data.success) {
                                datatable.ajax.reload();

                                Swal.fire({
                                    title: 'Deleted!',
                                    text: data.message,
                                    icon: 'success'
                                });
                            } else {
                                Swal.fire({
                                    title: 'Warning!',
                                    text: data.message,
                                    icon: 'warning'
                                });
                            }
                        }
                    });
                }
            });
        }*@




    //enable button


    </script>

}