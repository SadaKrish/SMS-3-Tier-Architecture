@model  SMS.ViewModel.Teacher.TeacherViewModel
@{
    ViewBag.Title = "Index";
}
<link href="https://cdn.datatables.net/2.0.7/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
<style>

    .table {
        font-size: 12px;
        text-align: center;
    }

    div .panel-body {
        margin-bottom: 25px;
    }
</style>
<div class="card panel-default">
    <div class="panel-heading">
        <h2 class="card-header">Teacher</h2>
    </div>

    <div class="panel-body card-body">
        <div class="filter">
            <label for="statusFilter">Filter by Status:</label>
            <select id="statusFilter">
                <option value="all">All</option>
                <option value="enabled">Enabled</option>
                <option value="disabled">Disabled</option>
            </select>
        </div>
        <a class="btn btn-outline-primary" style="margin: 10px; background-color: #cbf5ee;" onclick="LoadCreatePage()" id="button"> <i class="bi bi-plus"></i>  Add New Teacher</a>

        <div class="table-responsive">
            <table id="studentlist" class="table table-bordered table-striped" style="text-align:center; width: 100%;">
                <thead style="text-align:center;">
                    <tr>
                        
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().TeacherRegNo)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().FirstName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().MiddleName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().LastName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().DisplayName)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().Email)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().Gender)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().DOB)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().Address)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().ContactNo)</th>
                        <th style="background-color: #cbf5ee; text-align: center;">@Html.DisplayNameFor(model => model.TeacherList.First().IsEnable)</th>
                        <th style="background-color: #cbf5ee;"></th>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

<div class="col-md-4" id="createoredit">
    <!--Partial view-->


</div>




@section scripts{
    <script src="~/Scripts/jquery-ui-1.13.2.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.bootstrap5.min.js"></script>

    <script>
    //load the initail data
        $(document).ready(function () {
            // Call initializeDataTable function when the DOM is ready
            initializeDataTable();

            $('#statusFilter').on('change', function () {
                var filterValue = $(this).val(); // Get the selected filter value

                // Modify the AJAX URL based on the selected filter value
                var url;
                if (filterValue === 'all') {
                    url = '/Teacher/GetTeacher';
                } else {
                    url = '/Teacher/GetTeacher?isEnable=' + (filterValue === 'enabled');
                }

                // Reload the datatable with the updated data
                datatable.ajax.url(url).load();
            });
        });

        //Load create page
      function LoadCreatePage() {
        //* /Hide student list and load create new form*/
          $("#studentlist").hide();
          $("#button").hide();
          $('.panel-body').hide();
        //  $("createoredit").show();
          $("#back-to-list").show();

        $.ajax({
            type: "GET",
           url: "@Url.Action("AddOrEdit", "Teacher")",

            data: {},
            cache: false,
            async: false,

            success: function (data) {
                $("#createoredit").html(data)
            },
            error: function (xhr, ajaxOptions, thrownError) {
                aler('');
            }
        })
        }

        //load edit page
        function LoadEditPage(teacherId) {
            // Hide student list, button, and panel body
            $("#studentlist").hide();
            $("#button").hide();
            $('.panel-body').hide();
            $("#back-to-list").show(); // Show the "Back to List" button

            // Make an AJAX call to retrieve the edit form for the specified student ID
            $.ajax({
                type: "GET",
                url: "@Url.Action("AddOrEdit", "Teacher")/" + teacherId,
                cache: false,
                success: function (data) {
                    $("#createoredit").html(data); // Populate the create/edit form
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error loading edit form');
                }
            });
        }
        function addTeacherSuccess(response) {
            if (response.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: response.message,
                    showCancelButton: false,
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $("#createoredit").empty();

                        // Show the student list, button, panel body, and filter
                        $("#studentlist").show();
                        $("#button").show();
                        $('.panel-body').show();
                        $(".filter").show();

                        // Hide the "Back to List" button
                        $("#back-to-list").hide();

                        // Reload the data table
                        datatable.ajax.reload();
                    }
                });
            } else {
                Swal.fire({ icon: 'error', title: 'Error', text: response.message });
            }
        }

        function addTeacherFailure(error) {
            console.error(error);
            Swal.fire('Error!', 'An error occurred while adding the subject', 'error');
        }
        //back button actions

        function LoadList() {
            $("#studentlist").show();
            $('#button').show();
            $('#back-to-list').hide(); // Hide the "Back to List" button
            $("#createoredit").empty();
            $('.panel-body').show();
            $('.filter').show();
            datatable.ajax.reload();
        }

        //load table data
        function initializeDataTable() {
            datatable = $("#studentlist").DataTable({
                "ajax": {
                    "url": "/Teacher/GetTeacher",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "TeacherRegNo" },
                    { "data": "FirstName" },
                    { "data": "MiddleName" },
                    { "data": "LastName" },
                    { "data": "DisplayName" },
                    {
                        "data": "Email",
                        "render": function (data) {
                            return "<a href='mailto:" + data + "'>" + data + "</a>";
                        }
                    },
                    { "data": "Gender" },
                    {
                        "data": "DOB",
                        "render": function (data) {
                            // Format the date as "YYYY-MM-DD"
                            var date = new Date(parseInt(data.substr(6)));
                            return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
                        }
                    },
                    { "data": "Address" },
                    {
                        "data": "ContactNo",
                        "render": function (data) {
                            return "<a href='tel:" + data + "'>" + data + "</a>";
                        }
                    },

                    {
                        "data": "IsEnable",
                        "render": function (data, type, row) {
                            // Render a checkbox based on the IsEnable value
                            var checkbox = '<input type="checkbox" id="teacherCheckbox_' + row.TeacherID + '" ';
                            if (data) {
                                checkbox += 'checked ';
                            }
                            checkbox += 'onclick="ToggleEnable(' + row.TeacherID + ', this.checked)" />';

                            // Append the checkbox to the filter select element
                            // $('.filter').append('<option value="' + data + '">' + (data ? 'Enabled' : 'Disabled') + '</option>');

                            return checkbox;
                        }
                    },
                    {
                        "data": "TeacherID",
                        "render": function (data) {
                            return "<a class='btn' style='background-color: #cbf5ee ;' onclick= LoadEditPage(" + data + ")><i class='bi bi-pencil-square'></i></a>  <a class='btn' style='background-color: #cbf5ee ;' onclick=Delete(" + data + ")><i class='bi bi-trash' style='color:red;'></i></a>"
                        },
                        "orderable": false,
                        "searchable": false
                    }
                ],
                "pageLength": 5,
                "lengthMenu": [5, 10, 15, 20, 25]
            });
        }

        function getStatusFilterValue(statusFilter) {
            if (statusFilter === "enabled") {
                return true;
            } else if (statusFilter === "disabled") {
                return false;
            }
            // Return null for "all" option or if no filter is selected
            return null;
        }

        function Delete(id) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("Delete","Teacher")/' + id,
                        success: function (data) {
                            if (data.success) {
                                datatable.ajax.reload();

                                Swal.fire({
                                    title: 'Deleted!',
                                    text: data.message,
                                    icon: 'success'
                                });
                            } else {
                                Swal.fire({
                                    title: 'Warning!',
                                    text: data.message,
                                    icon: 'warning'
                                });
                            }
                        }
                    });
                }
            });
        }




    //enable button
            function ToggleEnable(id, isChecked) {
    Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to toggle the enable status of this teacher with id: ' + id + '?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            // Proceed with toggling the enable status of the teacher
            $.ajax({
                type: 'POST',
                url: '@Url.Action("ToggleEnable", "Teacher")/' + id,
                success: function(response) {
                    if (response.success) {
                        datatable.ajax.reload(); // Reload the data table
                        Swal.fire({
                            title: 'Success!',
                            text: response.message,
                            icon: 'success'
                        });
                    } else {
                        $('#teacherCheckbox_' + id).prop('checked', !isChecked);
                        Swal.fire({
                            title: 'Error!',
                            text: response.message,
                            icon: 'error'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'An error occurred while processing your request.',
                        icon: 'error'
                    });
                }
            });
        } else {
            $('#teacherCheckbox_' + id).prop('checked', !isChecked);
        }
    });
}

        // Define the getTeacherDisplayName function with a callback
        //function getTeacherDisplayName(id, callback) {
        //    // Make an AJAX call to fetch the display name based on the teacher ID
        //    $.ajax({
        //        type: 'GET',
        //        url: '/Teacher/GetTeacherDisplayName/' + id,
        //        success: function (response) {
        //            if (response.success) {
        //                callback(response.displayName);
        //            } else {
        //                console.error('Error: ' + response.message);
        //                callback('Unknown Teacher');
        //            }
        //        },
        //        error: function (xhr, status, error) {
        //            console.error('Error fetching teacher display name: ' + error);
        //            callback('Unknown Teacher');
        //        }
        //    });
        //}

        //// Example usage of getTeacherDisplayName with a callback
        //getTeacherDisplayName(id, function (displayName) {
        //    // Do something with the displayName here
        //    console.log('Teacher Display Name:', displayName);
        //});



    </script>

}



